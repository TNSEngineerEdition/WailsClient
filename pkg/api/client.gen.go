// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Weekday.
const (
	Friday    Weekday = "friday"
	Monday    Weekday = "monday"
	Saturday  Weekday = "saturday"
	Sunday    Weekday = "sunday"
	Thursday  Weekday = "thursday"
	Tuesday   Weekday = "tuesday"
	Wednesday Weekday = "wednesday"
)

// BodyGetCityDataWithCustomScheduleCitiesCityIdPost defines model for Body_get_city_data_with_custom_schedule_cities__city_id__post.
type BodyGetCityDataWithCustomScheduleCitiesCityIdPost struct {
	CustomScheduleFile openapi_types.File `json:"custom_schedule_file"`
}

// CachedCityDates defines model for CachedCityDates.
type CachedCityDates struct {
	AvailableDates    []openapi_types.Date `json:"available_dates"`
	CityConfiguration CityConfiguration    `json:"city_configuration"`
}

// CityConfiguration defines model for CityConfiguration.
type CityConfiguration struct {
	City                                string                                                              `json:"city"`
	Country                             string                                                              `json:"country"`
	CustomStopMapping                   map[string]CityConfiguration_CustomStopMapping_AdditionalProperties `json:"custom_stop_mapping"`
	CustomStopPairMapping               []CustomTramStopPairMapping                                         `json:"custom_stop_pair_mapping"`
	CustomTramStopPairMaxDistanceChecks []TramStopPairCheck                                                 `json:"custom_tram_stop_pair_max_distance_checks"`
	GtfsUrl                             string                                                              `json:"gtfs_url"`
	IgnoredGtfsLines                    []string                                                            `json:"ignored_gtfs_lines"`
	IgnoredOsmRelations                 []int                                                               `json:"ignored_osm_relations"`
	Image                               string                                                              `json:"image"`
	MaxDistanceRatio                    float32                                                             `json:"max_distance_ratio"`
	OsmAreaName                         string                                                              `json:"osm_area_name"`
}

// CityConfigurationCustomStopMapping0 defines model for .
type CityConfigurationCustomStopMapping0 = int

// CityConfigurationCustomStopMapping1 defines model for .
type CityConfigurationCustomStopMapping1 = []interface{}

// CityConfiguration_CustomStopMapping_AdditionalProperties defines model for CityConfiguration.custom_stop_mapping.AdditionalProperties.
type CityConfiguration_CustomStopMapping_AdditionalProperties struct {
	union json.RawMessage
}

// CustomTramStopPairMapping defines model for CustomTramStopPairMapping.
type CustomTramStopPairMapping struct {
	DestinationGtfsStopId string `json:"destination_gtfs_stop_id"`
	DestinationOsmNodeId  int    `json:"destination_osm_node_id"`
	SourceGtfsStopId      string `json:"source_gtfs_stop_id"`
	SourceOsmNodeId       int    `json:"source_osm_node_id"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// ResponseCityData defines model for ResponseCityData.
type ResponseCityData struct {
	TramRoutes     []ResponseTramRoute                    `json:"tram_routes"`
	TramTrackGraph []ResponseCityData_TramTrackGraph_Item `json:"tram_track_graph"`
}

// ResponseCityData_TramTrackGraph_Item defines model for ResponseCityData.tram_track_graph.Item.
type ResponseCityData_TramTrackGraph_Item struct {
	union json.RawMessage
}

// ResponseGraphEdge defines model for ResponseGraphEdge.
type ResponseGraphEdge struct {
	Azimuth  float32 `json:"azimuth"`
	Distance float32 `json:"distance"`
	ID       uint64  `json:"id"`
	MaxSpeed float32 `json:"max_speed"`
}

// ResponseGraphNode defines model for ResponseGraphNode.
type ResponseGraphNode struct {
	ID        uint64                       `json:"id"`
	Lat       float32                      `json:"lat"`
	Lon       float32                      `json:"lon"`
	Neighbors map[uint64]ResponseGraphEdge `json:"neighbors"`
	NodeType  string                       `json:"node_type,omitempty"`
}

// ResponseGraphTramStop defines model for ResponseGraphTramStop.
type ResponseGraphTramStop struct {
	GTFSStopIDs []string                     `json:"gtfs_stop_ids"`
	ID          uint64                       `json:"id"`
	Lat         float32                      `json:"lat"`
	Lon         float32                      `json:"lon"`
	Name        string                       `json:"name"`
	Neighbors   map[uint64]ResponseGraphEdge `json:"neighbors"`
	NodeType    string                       `json:"node_type,omitempty"`
}

// ResponseTramRoute defines model for ResponseTramRoute.
type ResponseTramRoute struct {
	BackgroundColor string              `json:"background_color"`
	Name            string              `json:"name"`
	TextColor       string              `json:"text_color"`
	Trips           *[]ResponseTramTrip `json:"trips,omitempty"`
}

// ResponseTramTrip defines model for ResponseTramTrip.
type ResponseTramTrip struct {
	Stops        []ResponseTramTripStop `json:"stops"`
	TripHeadSign string                 `json:"trip_head_sign"`
}

// ResponseTramTripStop defines model for ResponseTramTripStop.
type ResponseTramTripStop struct {
	ID   uint64 `json:"id"`
	Time uint   `json:"time"`
}

// TramStopPairCheck defines model for TramStopPairCheck.
type TramStopPairCheck struct {
	Destination int     `json:"destination"`
	Ratio       float32 `json:"ratio"`
	Source      int     `json:"source"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// Weekday defines model for Weekday.
type Weekday string

// GetCityDataCitiesCityIdGetParams defines parameters for GetCityDataCitiesCityIdGet.
type GetCityDataCitiesCityIdGetParams struct {
	Weekday *Weekday            `form:"weekday,omitempty" json:"weekday,omitempty"`
	Date    *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
}

// GetCityDataWithCustomScheduleCitiesCityIdPostParams defines parameters for GetCityDataWithCustomScheduleCitiesCityIdPost.
type GetCityDataWithCustomScheduleCitiesCityIdPostParams struct {
	Weekday *Weekday `form:"weekday,omitempty" json:"weekday,omitempty"`
}

// GetCityDataWithCustomScheduleCitiesCityIdPostMultipartRequestBody defines body for GetCityDataWithCustomScheduleCitiesCityIdPost for multipart/form-data ContentType.
type GetCityDataWithCustomScheduleCitiesCityIdPostMultipartRequestBody = BodyGetCityDataWithCustomScheduleCitiesCityIdPost

// AsCityConfigurationCustomStopMapping0 returns the union data inside the CityConfiguration_CustomStopMapping_AdditionalProperties as a CityConfigurationCustomStopMapping0
func (t CityConfiguration_CustomStopMapping_AdditionalProperties) AsCityConfigurationCustomStopMapping0() (CityConfigurationCustomStopMapping0, error) {
	var body CityConfigurationCustomStopMapping0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCityConfigurationCustomStopMapping0 overwrites any union data inside the CityConfiguration_CustomStopMapping_AdditionalProperties as the provided CityConfigurationCustomStopMapping0
func (t *CityConfiguration_CustomStopMapping_AdditionalProperties) FromCityConfigurationCustomStopMapping0(v CityConfigurationCustomStopMapping0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCityConfigurationCustomStopMapping0 performs a merge with any union data inside the CityConfiguration_CustomStopMapping_AdditionalProperties, using the provided CityConfigurationCustomStopMapping0
func (t *CityConfiguration_CustomStopMapping_AdditionalProperties) MergeCityConfigurationCustomStopMapping0(v CityConfigurationCustomStopMapping0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCityConfigurationCustomStopMapping1 returns the union data inside the CityConfiguration_CustomStopMapping_AdditionalProperties as a CityConfigurationCustomStopMapping1
func (t CityConfiguration_CustomStopMapping_AdditionalProperties) AsCityConfigurationCustomStopMapping1() (CityConfigurationCustomStopMapping1, error) {
	var body CityConfigurationCustomStopMapping1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCityConfigurationCustomStopMapping1 overwrites any union data inside the CityConfiguration_CustomStopMapping_AdditionalProperties as the provided CityConfigurationCustomStopMapping1
func (t *CityConfiguration_CustomStopMapping_AdditionalProperties) FromCityConfigurationCustomStopMapping1(v CityConfigurationCustomStopMapping1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCityConfigurationCustomStopMapping1 performs a merge with any union data inside the CityConfiguration_CustomStopMapping_AdditionalProperties, using the provided CityConfigurationCustomStopMapping1
func (t *CityConfiguration_CustomStopMapping_AdditionalProperties) MergeCityConfigurationCustomStopMapping1(v CityConfigurationCustomStopMapping1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CityConfiguration_CustomStopMapping_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CityConfiguration_CustomStopMapping_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResponseGraphNode returns the union data inside the ResponseCityData_TramTrackGraph_Item as a ResponseGraphNode
func (t ResponseCityData_TramTrackGraph_Item) AsResponseGraphNode() (ResponseGraphNode, error) {
	var body ResponseGraphNode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResponseGraphNode overwrites any union data inside the ResponseCityData_TramTrackGraph_Item as the provided ResponseGraphNode
func (t *ResponseCityData_TramTrackGraph_Item) FromResponseGraphNode(v ResponseGraphNode) error {
	v.NodeType = "node"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResponseGraphNode performs a merge with any union data inside the ResponseCityData_TramTrackGraph_Item, using the provided ResponseGraphNode
func (t *ResponseCityData_TramTrackGraph_Item) MergeResponseGraphNode(v ResponseGraphNode) error {
	v.NodeType = "node"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResponseGraphTramStop returns the union data inside the ResponseCityData_TramTrackGraph_Item as a ResponseGraphTramStop
func (t ResponseCityData_TramTrackGraph_Item) AsResponseGraphTramStop() (ResponseGraphTramStop, error) {
	var body ResponseGraphTramStop
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResponseGraphTramStop overwrites any union data inside the ResponseCityData_TramTrackGraph_Item as the provided ResponseGraphTramStop
func (t *ResponseCityData_TramTrackGraph_Item) FromResponseGraphTramStop(v ResponseGraphTramStop) error {
	v.NodeType = "stop"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResponseGraphTramStop performs a merge with any union data inside the ResponseCityData_TramTrackGraph_Item, using the provided ResponseGraphTramStop
func (t *ResponseCityData_TramTrackGraph_Item) MergeResponseGraphTramStop(v ResponseGraphTramStop) error {
	v.NodeType = "stop"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponseCityData_TramTrackGraph_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"node_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ResponseCityData_TramTrackGraph_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "node":
		return t.AsResponseGraphNode()
	case "stop":
		return t.AsResponseGraphTramStop()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ResponseCityData_TramTrackGraph_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponseCityData_TramTrackGraph_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CitiesCitiesGet request
	CitiesCitiesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCityDataCitiesCityIdGet request
	GetCityDataCitiesCityIdGet(ctx context.Context, cityId string, params *GetCityDataCitiesCityIdGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCityDataWithCustomScheduleCitiesCityIdPostWithBody request with any body
	GetCityDataWithCustomScheduleCitiesCityIdPostWithBody(ctx context.Context, cityId string, params *GetCityDataWithCustomScheduleCitiesCityIdPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CitiesCitiesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCitiesCitiesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCityDataCitiesCityIdGet(ctx context.Context, cityId string, params *GetCityDataCitiesCityIdGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCityDataCitiesCityIdGetRequest(c.Server, cityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCityDataWithCustomScheduleCitiesCityIdPostWithBody(ctx context.Context, cityId string, params *GetCityDataWithCustomScheduleCitiesCityIdPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCityDataWithCustomScheduleCitiesCityIdPostRequestWithBody(c.Server, cityId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCitiesCitiesGetRequest generates requests for CitiesCitiesGet
func NewCitiesCitiesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCityDataCitiesCityIdGetRequest generates requests for GetCityDataCitiesCityIdGet
func NewGetCityDataCitiesCityIdGetRequest(server string, cityId string, params *GetCityDataCitiesCityIdGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "city_id", runtime.ParamLocationPath, cityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Weekday != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "weekday", runtime.ParamLocationQuery, *params.Weekday); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCityDataWithCustomScheduleCitiesCityIdPostRequestWithBody generates requests for GetCityDataWithCustomScheduleCitiesCityIdPost with any type of body
func NewGetCityDataWithCustomScheduleCitiesCityIdPostRequestWithBody(server string, cityId string, params *GetCityDataWithCustomScheduleCitiesCityIdPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "city_id", runtime.ParamLocationPath, cityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Weekday != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "weekday", runtime.ParamLocationQuery, *params.Weekday); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CitiesCitiesGetWithResponse request
	CitiesCitiesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CitiesCitiesGetResponse, error)

	// GetCityDataCitiesCityIdGetWithResponse request
	GetCityDataCitiesCityIdGetWithResponse(ctx context.Context, cityId string, params *GetCityDataCitiesCityIdGetParams, reqEditors ...RequestEditorFn) (*GetCityDataCitiesCityIdGetResponse, error)

	// GetCityDataWithCustomScheduleCitiesCityIdPostWithBodyWithResponse request with any body
	GetCityDataWithCustomScheduleCitiesCityIdPostWithBodyWithResponse(ctx context.Context, cityId string, params *GetCityDataWithCustomScheduleCitiesCityIdPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCityDataWithCustomScheduleCitiesCityIdPostResponse, error)
}

type CitiesCitiesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]CachedCityDates
}

// Status returns HTTPResponse.Status
func (r CitiesCitiesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CitiesCitiesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCityDataCitiesCityIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseCityData
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetCityDataCitiesCityIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCityDataCitiesCityIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCityDataWithCustomScheduleCitiesCityIdPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseCityData
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetCityDataWithCustomScheduleCitiesCityIdPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCityDataWithCustomScheduleCitiesCityIdPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CitiesCitiesGetWithResponse request returning *CitiesCitiesGetResponse
func (c *ClientWithResponses) CitiesCitiesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CitiesCitiesGetResponse, error) {
	rsp, err := c.CitiesCitiesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCitiesCitiesGetResponse(rsp)
}

// GetCityDataCitiesCityIdGetWithResponse request returning *GetCityDataCitiesCityIdGetResponse
func (c *ClientWithResponses) GetCityDataCitiesCityIdGetWithResponse(ctx context.Context, cityId string, params *GetCityDataCitiesCityIdGetParams, reqEditors ...RequestEditorFn) (*GetCityDataCitiesCityIdGetResponse, error) {
	rsp, err := c.GetCityDataCitiesCityIdGet(ctx, cityId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCityDataCitiesCityIdGetResponse(rsp)
}

// GetCityDataWithCustomScheduleCitiesCityIdPostWithBodyWithResponse request with arbitrary body returning *GetCityDataWithCustomScheduleCitiesCityIdPostResponse
func (c *ClientWithResponses) GetCityDataWithCustomScheduleCitiesCityIdPostWithBodyWithResponse(ctx context.Context, cityId string, params *GetCityDataWithCustomScheduleCitiesCityIdPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCityDataWithCustomScheduleCitiesCityIdPostResponse, error) {
	rsp, err := c.GetCityDataWithCustomScheduleCitiesCityIdPostWithBody(ctx, cityId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCityDataWithCustomScheduleCitiesCityIdPostResponse(rsp)
}

// ParseCitiesCitiesGetResponse parses an HTTP response from a CitiesCitiesGetWithResponse call
func ParseCitiesCitiesGetResponse(rsp *http.Response) (*CitiesCitiesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CitiesCitiesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]CachedCityDates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCityDataCitiesCityIdGetResponse parses an HTTP response from a GetCityDataCitiesCityIdGetWithResponse call
func ParseGetCityDataCitiesCityIdGetResponse(rsp *http.Response) (*GetCityDataCitiesCityIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCityDataCitiesCityIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseCityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCityDataWithCustomScheduleCitiesCityIdPostResponse parses an HTTP response from a GetCityDataWithCustomScheduleCitiesCityIdPostWithResponse call
func ParseGetCityDataWithCustomScheduleCitiesCityIdPostResponse(rsp *http.Response) (*GetCityDataWithCustomScheduleCitiesCityIdPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCityDataWithCustomScheduleCitiesCityIdPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseCityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
